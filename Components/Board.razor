@inject GameState State
@using System.Drawing


<HeadContent>
    <style>
        :root {
            --board-bg:
        @ColorTranslator.ToHtml(BoardColor)
            ;
            --player1:
        @ColorTranslator.ToHtml(Player1Color)
            ;
            --player2:
        @ColorTranslator.ToHtml(Player2Color)
            ;
        }
    </style>
</HeadContent>

<!-- Color Picker Section -->
<div>
    <h4>Customize Game Colors</h4>
    <label>
        Board Color:
        <input type="color" @bind="BoardColorHex" />
    </label>
    <br />
    <label>
        Player 1 Color:
        <input type="color" @bind="Player1ColorHex" />
    </label>
    <br />
    <label>
        Player 2 Color:
        <input type="color" @bind="Player2ColorHex" />
    </label>
</div>

<!-- Game Controls -->
<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">ðŸ”½</span>
    }
</nav>

<article>
    @winnerMessage <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<!-- Game Board -->
<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
    </div>
    @for (var i = 0; i < 42; i++)
    {
        <span class="@pieces[i]" style="--player1: @Player1ColorHex; --player2: @Player2ColorHex;"></span>
    }
</div>

@code {
    private string BoardColorHex { get; set; } = "#FFFF00"; // Default yellow
    private string Player1ColorHex { get; set; } = "#FF0000"; // Default red
    private string Player2ColorHex { get; set; } = "#0000FF"; // Default blue

    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";

    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }

    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
        winnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player 1 Wins!",
            GameState.WinState.Player2_Wins => "Player 2 Wins!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };
    }

    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }
}